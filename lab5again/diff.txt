5c5,6
< alloc_size   = 151
---
> alloc_size   = 160
> Generating CFG..
11a13
> Generating UseDef
179,180c181,187
< Thread[0] worked 11 iterations.
< c runtime = 0.000356 s
---
> Creating SPU context
> liveness()
> Splitting worklist..
> Allocing thread_structs
> Thread[0] in thread_func()
> Thread[0] worked 13 iterations.
> spu_quit()c runtime = 0.000342 s
184,185c191,192
< in[0] = { 5 6 9 15 16 17 19 28 41 55 62 68 75 76 80 83 86 96 }
< out[0] = { 5 6 9 15 16 17 19 28 41 62 68 75 76 80 83 86 96 }
---
> in[0] = { 5 6 9 12 13 15 16 17 19 20 21 28 29 36 37 41 44 45 52 53 55 60 61 62 68 69 75 76 77 80 83 84 85 86 92 93 96 }
> out[0] = { 4 5 6 9 12 13 15 16 17 19 20 21 28 29 36 37 41 44 45 52 53 60 61 62 68 69 75 76 77 80 83 84 85 86 92 93 96 }
187,188c194,195
< use[1] = { 15 16 17 19 62 76 83 }
< def[1] = { 40 69 84 }
---
> use[1] = { 23 36 48 51 54 64 }
> def[1] = { }
190,191c197,198
< in[1] = { 15 16 17 19 62 76 83 }
< out[1] = { }
---
> in[1] = { 4 5 9 12 13 20 21 23 28 29 30 36 37 43 44 45 48 51 52 53 54 60 61 64 68 69 76 77 84 85 92 93 }
> out[1] = { 4 5 9 12 13 20 21 28 29 30 36 37 43 44 45 48 51 52 53 54 60 61 64 68 69 76 77 84 85 92 93 }
193,194c200,201
< use[2] = { 6 9 15 28 41 75 }
< def[2] = { 7 54 55 }
---
> use[2] = { 4 16 19 22 32 96 }
> def[2] = { 96 }
196,197c203,204
< in[2] = { 5 6 9 15 16 17 19 28 41 62 68 75 76 80 83 86 96 }
< out[2] = { 5 6 9 15 16 17 19 28 41 55 62 68 75 76 80 83 86 96 }
---
> in[2] = { 4 5 11 12 13 16 19 20 21 22 28 29 32 36 37 44 45 52 53 60 61 68 69 76 77 84 85 92 93 96 }
> out[2] = { 4 5 11 12 13 16 19 20 21 22 28 29 32 36 37 44 45 52 53 60 61 68 69 76 77 84 85 92 93 96 }
199,200c206,207
< use[3] = { 22 24 32 50 57 60 62 }
< def[3] = { 42 65 72 }
---
> use[3] = { 0 64 68 69 70 71 81 }
> def[3] = { 64 68 69 70 71 72 73 75 76 77 78 79 80 }
202,203c209,210
< in[3] = { 22 24 32 50 57 60 62 }
< out[3] = { }
---
> in[3] = { 0 4 5 12 13 20 21 28 29 36 37 44 45 52 53 60 61 64 68 69 70 71 81 84 85 92 93 }
> out[3] = { 0 4 5 12 13 20 21 28 29 36 37 44 45 52 53 60 61 64 68 69 70 71 76 77 81 84 85 92 93 }
205,206c212,213
< use[4] = { 10 20 24 42 44 57 94 }
< def[4] = { 13 53 66 }
---
> use[4] = { 32 36 37 38 39 49 }
> def[4] = { 32 36 37 38 39 40 41 43 44 45 46 47 48 }
208,209c215,216
< in[4] = { 10 20 24 42 44 57 94 }
< out[4] = { }
---
> in[4] = { 4 5 12 13 20 21 28 29 32 36 37 38 39 49 52 53 60 61 68 69 76 77 84 85 92 93 }
> out[4] = { 4 5 12 13 20 21 28 29 32 36 37 38 39 44 45 49 52 53 60 61 68 69 76 77 84 85 92 93 }
211,212c218,219
< use[5] = { 4 5 42 46 79 93 97 }
< def[5] = { 25 28 59 }
---
> use[5] = { 0 4 5 6 7 17 }
> def[5] = { 0 4 5 6 7 8 9 11 12 13 14 15 16 }
214,215c221,222
< in[5] = { 4 5 42 46 79 93 97 }
< out[5] = { }
---
> in[5] = { 0 4 5 6 7 17 20 21 28 29 36 37 44 45 52 53 60 61 68 69 76 77 84 85 92 93 }
> out[5] = { 0 4 5 6 7 12 13 17 20 21 28 29 36 37 44 45 52 53 60 61 68 69 76 77 84 85 92 93 }
217,218c224,225
< use[6] = { 10 42 56 62 77 90 93 }
< def[6] = { 0 65 80 }
---
> use[6] = { }
> def[6] = { }
220,221c227,228
< in[6] = { 10 42 56 62 77 90 93 }
< out[6] = { }
---
> in[6] = { 4 5 12 13 20 21 28 29 36 37 44 45 52 53 60 61 68 69 76 77 84 85 92 93 }
> out[6] = { 4 5 12 13 20 21 28 29 36 37 44 45 52 53 60 61 68 69 76 77 84 85 92 93 }
223,224c230,231
< use[7] = { 8 10 13 41 62 68 71 }
< def[7] = { 12 51 }
---
> use[7] = { }
> def[7] = { }
226,227c233,234
< in[7] = { 8 10 13 41 62 68 71 }
< out[7] = { }
---
> in[7] = { 4 5 12 13 20 21 28 29 36 37 44 45 52 53 60 61 68 69 76 77 84 85 92 93 }
> out[7] = { 4 5 12 13 20 21 28 29 36 37 44 45 52 53 60 61 68 69 76 77 84 85 92 93 }
